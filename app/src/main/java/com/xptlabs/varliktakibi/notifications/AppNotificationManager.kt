package com.xptlabs.varliktakibi.notifications

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.annotation.RequiresPermission
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.work.OneTimeWorkRequestBuilder
import androidx.work.WorkManager
import androidx.work.workDataOf
import com.xptlabs.varliktakibi.MainActivity
import com.xptlabs.varliktakibi.R
import com.xptlabs.varliktakibi.data.analytics.FirebaseAnalyticsManager
import dagger.hilt.android.qualifiers.ApplicationContext
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import javax.inject.Singleton
import kotlin.random.Random

@Singleton
class AppNotificationManager @Inject constructor(
    @ApplicationContext private val context: Context,
    private val analyticsManager: FirebaseAnalyticsManager
) {

    companion object {
        private const val TAG = "AppNotificationManager"
        private const val CHANNEL_ID = "varlik_takibi_reminders"
        private const val CHANNEL_NAME = "Varlƒ±k Takibi Hatƒ±rlatmalarƒ±"
        private const val CHANNEL_DESCRIPTION = "Varlƒ±k takibi ve piyasa g√ºncellemeleri"

        // Bildirim mesajlarƒ±
        private val NOTIFICATION_MESSAGES = listOf(
            NotificationMessage(
                "Varlƒ±klarƒ±nƒ±zƒ± Kontrol Edin! üìä",
                "Portf√∂y√ºn√ºzde deƒüi≈üiklik olabilir. G√ºncel durumu kontrol etmek i√ßin uygulamayƒ± a√ßƒ±n."
            ),
            NotificationMessage(
                "Piyasa G√ºncellemesi! üìà",
                "Altƒ±n ve d√∂viz kurlarƒ±nda hareketlilik var. Varlƒ±klarƒ±nƒ±zƒ±n durumunu inceleyin."
            ),
            NotificationMessage(
                "Kar/Zarar Takibi ‚ö°",
                "Portf√∂y√ºn√ºz√ºn kar/zarar durumunu kontrol etmeyi unutmayƒ±n!"
            ),
            NotificationMessage(
                "Yatƒ±rƒ±m Fƒ±rsatlarƒ±! üí∞",
                "G√ºncel kurlarƒ± kontrol ederek yeni yatƒ±rƒ±m fƒ±rsatlarƒ±nƒ± deƒüerlendirin."
            ),
            NotificationMessage(
                "Varlƒ±k Portf√∂y√º Hatƒ±rlatmasƒ± üîî",
                "Uzun s√ºredir uygulamayƒ± a√ßmadƒ±nƒ±z. Varlƒ±klarƒ±nƒ±zƒ±n durumunu kontrol edin."
            )
        )
    }

    data class NotificationMessage(
        val title: String,
        val body: String
    )

    private val notificationManager = NotificationManagerCompat.from(context)

    init {
        createNotificationChannel()
        // Uygulama ba≈ülatƒ±ldƒ±ƒüƒ±nda test notification g√∂nder (Android capability'sini tetiklemek i√ßin)
        sendInitialCapabilityNotification()
    }

    fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = CHANNEL_DESCRIPTION
                enableLights(true)
                enableVibration(true)
                setShowBadge(true)
            }

            val systemNotificationManager = context.getSystemService(NotificationManager::class.java)
            systemNotificationManager.createNotificationChannel(channel)

            Log.d(TAG, "Notification channel created: $CHANNEL_ID")
        }
    }

    private fun sendInitialCapabilityNotification() {
        // Uygulama ilk kurulduƒüunda g√∂r√ºnmez bir notification g√∂nder
        // Bu Android'e uygulamanƒ±n notification capability'si olduƒüunu g√∂sterir
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                // Android 13+ i√ßin √∂nce permission kontrol√º
                if (areNotificationsEnabled()) {
                    sendCapabilityNotification()
                }
            } else {
                // Eski Android versiyonlarƒ± i√ßin direkt g√∂nder
                sendCapabilityNotification()
            }
        } catch (e: Exception) {
            Log.d(TAG, "Capability notification not sent (normal): ${e.message}")
        }
    }

    private fun sendCapabilityNotification() {
        try {
            val notification = NotificationCompat.Builder(context, CHANNEL_ID)
                .setSmallIcon(android.R.drawable.ic_dialog_info)
                .setContentTitle("Varlƒ±k Takibi")
                .setContentText("Uygulama hazƒ±r!")
                .setPriority(NotificationCompat.PRIORITY_MIN) // Minimum priority
                .setAutoCancel(true)
                .setTimeoutAfter(1000) // 1 saniye sonra otomatik sil
                .build()

            notificationManager.notify(999, notification)

            // Hemen iptal et
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                notificationManager.cancel(999)
            }, 1000)

            Log.d(TAG, "Capability notification sent and cancelled")
        } catch (e: Exception) {
            Log.d(TAG, "Capability notification failed: ${e.message}")
        }
    }

    fun scheduleNextNotification() {
        // 2-3 g√ºn arasƒ± random delay (2-3 g√ºn = 48-72 saat)
        val delayHours = Random.nextLong(48, 73) // 48-72 saat arasƒ±
        val delayMinutes = delayHours * 60

        // Random mesaj se√ß
        val messageIndex = Random.nextInt(NOTIFICATION_MESSAGES.size)
        val message = NOTIFICATION_MESSAGES[messageIndex]

        val workRequest = OneTimeWorkRequestBuilder<NotificationWorker>()
            .setInitialDelay(delayMinutes, TimeUnit.MINUTES)
            .setInputData(
                workDataOf(
                    "title" to message.title,
                    "body" to message.body,
                    "messageIndex" to messageIndex
                )
            )
            .addTag("notification_reminder")
            .build()

        WorkManager.getInstance(context).enqueue(workRequest)

        Log.d(TAG, "Next notification scheduled in $delayHours hours with message: ${message.title}")

        // Analytics
        analyticsManager.logCustomEvent(
            eventName = "notification_scheduled",
            parameters = mapOf(
                "delay_hours" to delayHours,
                "message_index" to messageIndex,
                "message_title" to message.title
            )
        )
    }

    @RequiresPermission(Manifest.permission.POST_NOTIFICATIONS)
    fun showNotification(title: String, body: String, messageIndex: Int = 0) {
        if (!areNotificationsEnabled()) {
            Log.d(TAG, "Notifications not enabled, skipping")
            return
        }

        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("from_notification", true)
            putExtra("notification_message_index", messageIndex)
        }

        val pendingIntent = PendingIntent.getActivity(
            context,
            messageIndex,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentTitle(title)
            .setContentText(body)
            .setStyle(NotificationCompat.BigTextStyle().bigText(body))
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setDefaults(NotificationCompat.DEFAULT_ALL)
            .setShowWhen(true)
            .setWhen(System.currentTimeMillis())
            .build()

        try {
            notificationManager.notify(messageIndex, notification)
            Log.d(TAG, "Notification shown: $title")

            // Analytics
            analyticsManager.logCustomEvent(
                eventName = "notification_shown",
                parameters = mapOf(
                    "title" to title,
                    "message_index" to messageIndex
                )
            )
        } catch (e: SecurityException) {
            Log.e(TAG, "No notification permission", e)
        }
    }

    fun areNotificationsEnabled(): Boolean {
        return notificationManager.areNotificationsEnabled()
    }

    fun cancelAllScheduledNotifications() {
        WorkManager.getInstance(context).cancelAllWorkByTag("notification_reminder")
        Log.d(TAG, "All scheduled notifications cancelled")

        // Analytics
        analyticsManager.logCustomEvent(
            eventName = "notifications_cancelled",
            parameters = emptyMap()
        )
    }

    fun getNotificationMessages(): List<NotificationMessage> {
        return NOTIFICATION_MESSAGES
    }

    // Test i√ßin manuel bildirim g√∂nderme - Bu Android'e capability g√∂sterir
    @RequiresPermission(Manifest.permission.POST_NOTIFICATIONS)
    fun sendTestNotification() {
        val testMessage = NOTIFICATION_MESSAGES.random()
        showNotification(testMessage.title, testMessage.body, 999)
    }

    // Force notification capability registration
    fun forceRegisterNotificationCapability() {
        try {
            createNotificationChannel()

            // Bir test notification g√∂nder ve hemen iptal et
            if (areNotificationsEnabled()) {
                sendCapabilityNotification()
            }

            Log.d(TAG, "Notification capability forcefully registered")
        } catch (e: Exception) {
            Log.e(TAG, "Failed to register notification capability", e)
        }
    }
}